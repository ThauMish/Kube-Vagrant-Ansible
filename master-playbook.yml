---
- hosts: all
  become: true
  tasks:
  - name: Install necessary packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common 
      - gnupg2
      - net-tools

  - name: Add Docker's official GPG key
    file:
      path: /etc/apt/keyrings
      state: directory

  - name: Verify fingerprint
    shell: apt-key fingerprint 0EBFCD88
    ignore_errors: "{{ docker_apt_ignore_key_error }}"
 
  - name: Download and save Docker's official GPG key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.gpg
      mode: 0644
      validate_certs: yes
      force: yes
    
  - name: Add Docker's official repository
    lineinfile:
      path: /etc/apt/sources.list.d/docker.list
      line: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu bionic stable
      state: present
      create: yes

  - name: Update package lists
    apt:
      update_cache: yes

  - name: Install containerd.io
    apt:
      name: containerd.io
      state: present
      
  - name: Backup containerd config
    copy:
      src: /etc/containerd/config.toml
      dest: /etc/containerd/config.toml.bak
    
  - name: Generate new containerd config
    command: containerd config default > /etc/containerd/config.toml
    
  - name: Enable SystemdCgroup
    lineinfile:
      path: /etc/containerd/config.toml
      line: SystemdCgroup = true
      state: present
      regexp: "^SystemdCgroup = false$"
    
  - name: Restart containerd
    systemd:
      name: containerd
      state: restarted
  
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetesbinaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.26.0-00
        - kubeadm=1.26.0-00
        - kubectl=1.26.0-00

  - name: Configure containerd
    blockinfile:
      create: true
      path: /etc/modules-load.d/containerd.conf
      block: |
        overlay
        br_netfilter

  - name: Enable kernel modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Configure IP forwarding and iptables
    blockinfile:
      create: true
      path: /etc/sysctl.conf
      block: |
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Persist changes
    command: sysctl -p

  - name: Get IP eno1 addr
    shell: ifconfig eno1 | grep 'inet' | cut -d{{':'}} -f2 | awk '{ print $2 }'
    register: output

  - name: Configure kubelet
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      line: Environment="KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }}

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.31.100" --apiserver-cert-extra-sans="192.168.31.100" --pod-network-cidr=176.16.0.0/16

  - name: Create kube directory
    file:
      path: /home/vagrant/.kube
      state: directory

  - name: Setup kubeconfig for vagrant user
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: yes
      owner: vagrant
      group: vagrant
      mode: '0644'

  - name: Install calico CNI
    become: false
    command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
